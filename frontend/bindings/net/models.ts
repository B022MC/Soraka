// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * An IP is a single IP address, a slice of bytes.
 * Functions in this package accept either 4-byte (IPv4)
 * or 16-byte (IPv6) slices as input.
 * 
 * Note that in this documentation, referring to an
 * IP address as an IPv4 address or an IPv6 address
 * is a semantic property of the address, not just the
 * length of the byte slice: a 16-byte slice can still
 * be an IPv4 address.
 */
export type IP = string;

/**
 * An IPMask is a bitmask that can be used to manipulate
 * IP addresses for IP addressing and routing.
 * 
 * See type [IPNet] and func [ParseCIDR] for details.
 */
export type IPMask = string;

/**
 * An IPNet represents an IP network.
 */
export class IPNet {
    /**
     * network number
     */
    "IP": IP;

    /**
     * network mask
     */
    "Mask": IPMask;

    /** Creates a new IPNet instance. */
    constructor($$source: Partial<IPNet> = {}) {
        if (!("IP" in $$source)) {
            this["IP"] = "";
        }
        if (!("Mask" in $$source)) {
            this["Mask"] = ("" as IPMask);
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new IPNet instance from a string or object.
     */
    static createFrom($$source: any = {}): IPNet {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Mask" in $$parsedSource) {
            $$parsedSource["Mask"] = $$createField1_0($$parsedSource["Mask"]);
        }
        return new IPNet($$parsedSource as Partial<IPNet>);
    }
}

// Private type creation functions
var $$createType0 = (function $$initCreateType0(...args): any {
    if ($$createType0 === $$initCreateType0) {
        $$createType0 = $Create.ByteSlice;
    }
    return $$createType0(...args);
});
