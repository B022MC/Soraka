// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * A URL represents a parsed URL (technically, a URI reference).
 * 
 * The general form represented is:
 * 
 * 	[scheme:][//[userinfo@]host][/]path[?query][#fragment]
 * 
 * URLs that do not start with a slash after the scheme are interpreted as:
 * 
 * 	scheme:opaque[?query][#fragment]
 * 
 * The Host field contains the host and port subcomponents of the URL.
 * When the port is present, it is separated from the host with a colon.
 * When the host is an IPv6 address, it must be enclosed in square brackets:
 * "[fe80::1]:80". The [net.JoinHostPort] function combines a host and port
 * into a string suitable for the Host field, adding square brackets to
 * the host when necessary.
 * 
 * Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.
 * A consequence is that it is impossible to tell which slashes in the Path were
 * slashes in the raw URL and which were %2f. This distinction is rarely important,
 * but when it is, the code should use the [URL.EscapedPath] method, which preserves
 * the original encoding of Path.
 * 
 * The RawPath field is an optional field which is only set when the default
 * encoding of Path is different from the escaped path. See the EscapedPath method
 * for more details.
 * 
 * URL's String method uses the EscapedPath method to obtain the path.
 */
export class URL {
    "Scheme": string;

    /**
     * encoded opaque data
     */
    "Opaque": string;

    /**
     * username and password information
     */
    "User": Userinfo | null;

    /**
     * host or host:port (see Hostname and Port methods)
     */
    "Host": string;

    /**
     * path (relative paths may omit leading slash)
     */
    "Path": string;

    /**
     * encoded path hint (see EscapedPath method)
     */
    "RawPath": string;

    /**
     * do not emit empty host (authority)
     */
    "OmitHost": boolean;

    /**
     * append a query ('?') even if RawQuery is empty
     */
    "ForceQuery": boolean;

    /**
     * encoded query values, without '?'
     */
    "RawQuery": string;

    /**
     * fragment for references, without '#'
     */
    "Fragment": string;

    /**
     * encoded fragment hint (see EscapedFragment method)
     */
    "RawFragment": string;

    /** Creates a new URL instance. */
    constructor($$source: Partial<URL> = {}) {
        if (!("Scheme" in $$source)) {
            this["Scheme"] = "";
        }
        if (!("Opaque" in $$source)) {
            this["Opaque"] = "";
        }
        if (!("User" in $$source)) {
            this["User"] = null;
        }
        if (!("Host" in $$source)) {
            this["Host"] = "";
        }
        if (!("Path" in $$source)) {
            this["Path"] = "";
        }
        if (!("RawPath" in $$source)) {
            this["RawPath"] = "";
        }
        if (!("OmitHost" in $$source)) {
            this["OmitHost"] = false;
        }
        if (!("ForceQuery" in $$source)) {
            this["ForceQuery"] = false;
        }
        if (!("RawQuery" in $$source)) {
            this["RawQuery"] = "";
        }
        if (!("Fragment" in $$source)) {
            this["Fragment"] = "";
        }
        if (!("RawFragment" in $$source)) {
            this["RawFragment"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new URL instance from a string or object.
     */
    static createFrom($$source: any = {}): URL {
        const $$createField2_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("User" in $$parsedSource) {
            $$parsedSource["User"] = $$createField2_0($$parsedSource["User"]);
        }
        return new URL($$parsedSource as Partial<URL>);
    }
}

/**
 * The Userinfo type is an immutable encapsulation of username and
 * password details for a [URL]. An existing Userinfo value is guaranteed
 * to have a username set (potentially empty, as allowed by RFC 2396),
 * and optionally a password.
 */
export class Userinfo {

    /** Creates a new Userinfo instance. */
    constructor($$source: Partial<Userinfo> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Userinfo instance from a string or object.
     */
    static createFrom($$source: any = {}): Userinfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Userinfo($$parsedSource as Partial<Userinfo>);
    }
}

/**
 * Values maps a string key to a list of values.
 * It is typically used for query parameters and form values.
 * Unlike in the http.Header map, the keys in a Values map
 * are case-sensitive.
 */
export type Values = { [_: string]: string[] };

// Private type creation functions
const $$createType0 = Userinfo.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
