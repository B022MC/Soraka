// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as textproto$0 from "../../net/textproto/models.js";

/**
 * A FileHeader describes a file part of a multipart request.
 */
export class FileHeader {
    "Filename": string;
    "Header": textproto$0.MIMEHeader;
    "Size": number;

    /** Creates a new FileHeader instance. */
    constructor($$source: Partial<FileHeader> = {}) {
        if (!("Filename" in $$source)) {
            this["Filename"] = "";
        }
        if (!("Header" in $$source)) {
            this["Header"] = ({} as textproto$0.MIMEHeader);
        }
        if (!("Size" in $$source)) {
            this["Size"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FileHeader instance from a string or object.
     */
    static createFrom($$source: any = {}): FileHeader {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Header" in $$parsedSource) {
            $$parsedSource["Header"] = $$createField1_0($$parsedSource["Header"]);
        }
        return new FileHeader($$parsedSource as Partial<FileHeader>);
    }
}

/**
 * Form is a parsed multipart form.
 * Its File parts are stored either in memory or on disk,
 * and are accessible via the [*FileHeader]'s Open method.
 * Its Value parts are stored as strings.
 * Both are keyed by field name.
 */
export class Form {
    "Value": { [_: string]: string[] };
    "File": { [_: string]: (FileHeader | null)[] };

    /** Creates a new Form instance. */
    constructor($$source: Partial<Form> = {}) {
        if (!("Value" in $$source)) {
            this["Value"] = {};
        }
        if (!("File" in $$source)) {
            this["File"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Form instance from a string or object.
     */
    static createFrom($$source: any = {}): Form {
        const $$createField0_0 = $$createType2;
        const $$createField1_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Value" in $$parsedSource) {
            $$parsedSource["Value"] = $$createField0_0($$parsedSource["Value"]);
        }
        if ("File" in $$parsedSource) {
            $$parsedSource["File"] = $$createField1_0($$parsedSource["File"]);
        }
        return new Form($$parsedSource as Partial<Form>);
    }
}

// Private type creation functions
var $$createType0 = (function $$initCreateType0(...args): any {
    if ($$createType0 === $$initCreateType0) {
        $$createType0 = $$createType2;
    }
    return $$createType0(...args);
});
const $$createType1 = $Create.Array($Create.Any);
const $$createType2 = $Create.Map($Create.Any, $$createType1);
const $$createType3 = FileHeader.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $Create.Map($Create.Any, $$createType5);
