// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as http$0 from "../../../net/http/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $internal from "./internal.js";

/**
 * Context is the most important part of gin. It allows us to pass variables between middleware,
 * manage the flow, validate the JSON of a request and render a JSON response for example.
 */
export class Context {
    "Request": http$0.Request | null;
    "Writer": ResponseWriter;
    "Params": Params;

    /**
     * Keys is a key/value pair exclusively for the context of each request.
     */
    "Keys": { [_: string]: any };

    /**
     * Errors is a list of errors attached to all the handlers/middlewares who used this context.
     */
    "Errors": $internal.errorMsgs;

    /**
     * Accepted defines a list of manually accepted formats for content negotiation.
     */
    "Accepted": string[];

    /** Creates a new Context instance. */
    constructor($$source: Partial<Context> = {}) {
        if (!("Request" in $$source)) {
            this["Request"] = null;
        }
        if (!("Writer" in $$source)) {
            this["Writer"] = null;
        }
        if (!("Params" in $$source)) {
            this["Params"] = ([] as Params);
        }
        if (!("Keys" in $$source)) {
            this["Keys"] = {};
        }
        if (!("Errors" in $$source)) {
            this["Errors"] = null;
        }
        if (!("Accepted" in $$source)) {
            this["Accepted"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Context instance from a string or object.
     */
    static createFrom($$source: any = {}): Context {
        const $$createField0_0 = $$createType1;
        const $$createField2_0 = $$createType2;
        const $$createField3_0 = $$createType5;
        const $$createField5_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Request" in $$parsedSource) {
            $$parsedSource["Request"] = $$createField0_0($$parsedSource["Request"]);
        }
        if ("Params" in $$parsedSource) {
            $$parsedSource["Params"] = $$createField2_0($$parsedSource["Params"]);
        }
        if ("Keys" in $$parsedSource) {
            $$parsedSource["Keys"] = $$createField3_0($$parsedSource["Keys"]);
        }
        if ("Accepted" in $$parsedSource) {
            $$parsedSource["Accepted"] = $$createField5_0($$parsedSource["Accepted"]);
        }
        return new Context($$parsedSource as Partial<Context>);
    }
}

/**
 * IRoutes defines all router handle interface.
 */
export type IRoutes = any;

/**
 * Param is a single URL parameter, consisting of a key and a value.
 */
export class Param {
    "Key": string;
    "Value": string;

    /** Creates a new Param instance. */
    constructor($$source: Partial<Param> = {}) {
        if (!("Key" in $$source)) {
            this["Key"] = "";
        }
        if (!("Value" in $$source)) {
            this["Value"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Param instance from a string or object.
     */
    static createFrom($$source: any = {}): Param {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Param($$parsedSource as Partial<Param>);
    }
}

/**
 * Params is a Param-slice, as returned by the router.
 * The slice is ordered, the first URL parameter is also the first slice value.
 * It is therefore safe to read values by the index.
 */
export type Params = Param[];

/**
 * ResponseWriter ...
 */
export type ResponseWriter = any;

// Private type creation functions
const $$createType0 = http$0.Request.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
var $$createType2 = (function $$initCreateType2(...args): any {
    if ($$createType2 === $$initCreateType2) {
        $$createType2 = $$createType4;
    }
    return $$createType2(...args);
});
const $$createType3 = Param.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = $Create.Map($Create.Any, $Create.Any);
const $$createType6 = $Create.Array($Create.Any);
